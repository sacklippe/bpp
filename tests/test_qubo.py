import unittest

import numpy as np

from bpp.params import BppParams
from bpp.qubo import (formulate_Q, formulate_Qss, formulate_Qxs, formulate_Qxx,
                      formulate_Qxy, formulate_Qys, formulate_Qyy)


class TestQUBO(unittest.TestCase):
    def setUp(self) -> None:
        item_weight = np.array([4, 5, 5])
        bin_capacity = np.array([5, 5, 5])
        self.params = BppParams(item_weight=item_weight, bin_capacity=bin_capacity)
        self.lambda_eq = 1
        self.lambda_ineq = 1

    def test_formulate_Qxx(self) -> None:
        targ_Qxx = np.array(
            [
                [1.0, 2.0, 2.0, 40.0, 0.0, 0.0, 40.0, 0.0, 0.0],
                [0.0, 1.0, 2.0, 0.0, 40.0, 0.0, 0.0, 40.0, 0.0],
                [0.0, 0.0, 1.0, 0.0, 0.0, 40.0, 0.0, 0.0, 40.0],
                [0.0, 0.0, 0.0, 2.125, 2.0, 2.0, 50.0, 0.0, 0.0],
                [0.0, 0.0, 0.0, 0.0, 2.125, 2.0, 0.0, 50.0, 0.0],
                [0.0, 0.0, 0.0, 0.0, 0.0, 2.125, 0.0, 0.0, 50.0],
                [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.125, 2.0, 2.0],
                [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.125, 2.0],
                [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.125],
            ]
        )

        calc_Qxx = formulate_Qxx(self.params, self.lambda_eq, self.lambda_ineq)
        self.assertTrue(np.array_equal(targ_Qxx, calc_Qxx))

    def test_forumlate_Qxy(self) -> None:
        targ_Qxy = np.array(
            [
                [0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0],
                [-5.0, 0.0, 0.0],
                [0.0, -5.0, 0.0],
                [0.0, 0.0, -5.0],
                [-6.25, 0.0, 0.0],
                [0.0, -6.25, 0.0],
                [0.0, 0.0, -6.25],
                [-6.25, 0.0, 0.0],
            ]
        )

        calc_Qxy = formulate_Qxy(self.params, self.lambda_ineq)
        self.assertTrue(np.array_equal(targ_Qxy, calc_Qxy))

    def test_formulate_Qxs(self) -> None:
        targ_Qxs = np.array(
            [
                [1.0, 2.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0, 1.0, 2.0, 4.0, 0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 2.0, 4.0],
                [1.25, 2.5, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0, 1.25, 2.5, 5.0, 0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.25, 2.5, 5.0],
                [1.25, 2.5, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0, 1.25, 2.5, 5.0, 0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.25, 2.5, 5.0],
            ]
        )

        calc_Qxs = formulate_Qxs(self.params, self.lambda_ineq)
        self.assertTrue(np.array_equal(targ_Qxs, calc_Qxs))

    def test_formulate_Qyy(self) -> None:
        targ_Qyy = np.array(
            [
                [4.125, 0.0, 0.0],
                [0.0, 4.125, 0.0],
                [0.0, 0.0, 4.125],
            ]
        )

        calc_Qyy = formulate_Qyy(self.params, self.lambda_ineq)
        self.assertTrue(np.array_equal(targ_Qyy, calc_Qyy))

    def test_formulate_Qys(self) -> None:
        targ_Qys = np.array(
            [
                [-2.5, -5.0, -10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0, -2.5, -5.0, -10.0, 0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.5, -5.0, -10.0],
            ]
        )
        calc_Qys = formulate_Qys(self.params, self.lambda_ineq)
        self.assertTrue(np.array_equal(targ_Qys, calc_Qys))

    def test_forumlate_Qss(self) -> None:
        targ_Qss = np.array(
            [
                [0.125, 0.5, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                [0.0, 0.5, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                [0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0, 0.125, 0.5, 1.0, 0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0, 0.0, 0.5, 2.0, 0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.125, 0.5, 1.0],
                [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 2.0],
                [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0],
            ]
        )

        calc_Qss = formulate_Qss(self.params, self.lambda_ineq)
        self.assertTrue(np.array_equal(targ_Qss, calc_Qss))

    def test_formulate_Q(self) -> None:
        targ_Q = np.array(
            [
                [
                    1.0,
                    2.0,
                    2.0,
                    40.0,
                    0.0,
                    0.0,
                    40.0,
                    0.0,
                    0.0,
                    -5.0,
                    0.0,
                    0.0,
                    1.0,
                    2.0,
                    4.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                ],
                [
                    0.0,
                    1.0,
                    2.0,
                    0.0,
                    40.0,
                    0.0,
                    0.0,
                    40.0,
                    0.0,
                    0.0,
                    -5.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    1.0,
                    2.0,
                    4.0,
                    0.0,
                    0.0,
                    0.0,
                ],
                [
                    0.0,
                    0.0,
                    1.0,
                    0.0,
                    0.0,
                    40.0,
                    0.0,
                    0.0,
                    40.0,
                    0.0,
                    0.0,
                    -5.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    1.0,
                    2.0,
                    4.0,
                ],
                [
                    0.0,
                    0.0,
                    0.0,
                    2.125,
                    2.0,
                    2.0,
                    50.0,
                    0.0,
                    0.0,
                    -6.25,
                    0.0,
                    0.0,
                    1.25,
                    2.5,
                    5.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                ],
                [
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    2.125,
                    2.0,
                    0.0,
                    50.0,
                    0.0,
                    0.0,
                    -6.25,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    1.25,
                    2.5,
                    5.0,
                    0.0,
                    0.0,
                    0.0,
                ],
                [
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    2.125,
                    0.0,
                    0.0,
                    50.0,
                    0.0,
                    0.0,
                    -6.25,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    1.25,
                    2.5,
                    5.0,
                ],
                [
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    2.125,
                    2.0,
                    2.0,
                    -6.25,
                    0.0,
                    0.0,
                    1.25,
                    2.5,
                    5.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                ],
                [
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    2.125,
                    2.0,
                    0.0,
                    -6.25,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    1.25,
                    2.5,
                    5.0,
                    0.0,
                    0.0,
                    0.0,
                ],
                [
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    2.125,
                    0.0,
                    0.0,
                    -6.25,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    1.25,
                    2.5,
                    5.0,
                ],
                [
                    -0.0,
                    0.0,
                    0.0,
                    -0.0,
                    0.0,
                    0.0,
                    -0.0,
                    0.0,
                    0.0,
                    4.125,
                    0.0,
                    0.0,
                    -1.25,
                    -2.5,
                    -5.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                ],
                [
                    0.0,
                    -0.0,
                    0.0,
                    0.0,
                    -0.0,
                    0.0,
                    0.0,
                    -0.0,
                    0.0,
                    0.0,
                    4.125,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    -1.25,
                    2.5,
                    -5.0,
                    0.0,
                    0.0,
                    0.0,
                ],
                [
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    -0.0,
                    0.0,
                    0.0,
                    -0.0,
                    0.0,
                    0.0,
                    4.125,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    -1.25,
                    -2.5,
                    -5.0,
                ],
                [
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    -0.0,
                    0.0,
                    0.0,
                    0.125,
                    0.5,
                    1.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                ],
                [
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    -0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.5,
                    2.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                ],
                [
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    -0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    2.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                ],
                [
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    -0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.125,
                    0.5,
                    1.0,
                    0.0,
                    0.0,
                    0.0,
                ],
                [
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    -0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.5,
                    2.0,
                    0.0,
                    0.0,
                    0.0,
                ],
                [
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    -0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    2.0,
                    0.0,
                    0.0,
                    0.0,
                ],
                [
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    -0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.125,
                    0.5,
                    1.0,
                ],
                [
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    -0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.5,
                    2.0,
                ],
                [
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    -0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    2.0,
                ],
            ]
        )

        calc_Q = formulate_Q(self.params, self.lambda_eq, self.lambda_ineq)
        self.assertTrue(np.array_equal(targ_Q, calc_Q))


if __name__ == "__main__":
    unittest.main()
